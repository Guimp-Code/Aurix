#!/usr/bin/env python3
"""
Teste do Sistema H√≠brido: Cursor AI + Ollama NITRO + Offline
"""

import json
from pathlib import Path

def test_hybrid_system():
    """Testa o sistema h√≠brido completo"""
    print("üöÄ === Testando Sistema H√≠brido ===")
    
    from app.agents._util import (
        hybrid_ai_chat_with_offline,
        auto_detect_mode,
        _check_internet,
        _check_cursor_ai_available
    )
    
    # Teste 1: Detec√ß√£o autom√°tica de modo
    print("\n1Ô∏è‚É£ Testando detec√ß√£o autom√°tica de modo...")
    mode = auto_detect_mode()
    print(f"   Modo detectado: {mode}")
    
    # Teste 2: Verifica√ß√£o de conectividade
    print("\n2Ô∏è‚É£ Testando conectividade...")
    internet = _check_internet()
    cursor_ai = _check_cursor_ai_available()
    print(f"   Internet: {'‚úÖ' if internet else '‚ùå'}")
    print(f"   Cursor AI: {'‚úÖ' if cursor_ai else '‚ùå'}")
    
    # Teste 3: Sistema h√≠brido
    print("\n3Ô∏è‚É£ Testando sistema h√≠brido...")
    system_prompt = "Voc√™ √© um assistente √∫til. Responda em JSON: {'message': 'teste'}."
    user_input = "Teste do sistema h√≠brido"
    
    try:
        response = hybrid_ai_chat_with_offline(system_prompt, user_input)
        print(f"   Resposta recebida: {len(response)} chars")
        
        # Tentar extrair JSON
        try:
            data = json.loads(response)
            print(f"   JSON v√°lido: ‚úÖ")
            print(f"   Conte√∫do: {data}")
        except:
            print(f"   JSON inv√°lido: ‚ùå")
            print(f"   Resposta: {response[:200]}...")
            
    except Exception as e:
        print(f"   Erro: {e}")
    
    return True

def test_offline_fallback():
    """Testa o fallback offline"""
    print("\nüåê === Testando Fallback Offline ===")
    
    from app.agents._util import _offline_template_fallback
    
    system = "Gere um JSON simples"
    user = "Teste offline"
    
    response = _offline_template_fallback(system, user)
    print(f"Template offline: {len(response)} chars")
    print(f"Conte√∫do: {response[:200]}...")
    
    return True

def test_ollama_nitro():
    """Testa Ollama NITRO (se dispon√≠vel)"""
    print("\n‚ö° === Testando Ollama NITRO ===")
    
    try:
        from app.agents._util import ollama_nitro_chat
        
        system = "Responda em JSON: {'status': 'nitro'}."
        user = "Teste NITRO"
        
        response = ollama_nitro_chat(system, user)
        print(f"NITRO response: {len(response)} chars")
        print(f"Conte√∫do: {response[:200]}...")
        
        return True
        
    except Exception as e:
        print(f"Ollama NITRO n√£o dispon√≠vel: {e}")
        print("üí° Para usar NITRO: ollama pull tinyllama:1b")
        return False

def main():
    """Executa todos os testes"""
    try:
        test_hybrid_system()
        test_offline_fallback()
        test_ollama_nitro()
        
        print("\nüéâ Sistema H√≠brido testado com sucesso!")
        print("\nüìã Resumo:")
        print("   ‚úÖ Cursor AI: Principal (sem sobrecarga)")
        print("   ‚úÖ Ollama NITRO: Refor√ßo (1GB RAM)")
        print("   ‚úÖ Offline: Fallback sempre dispon√≠vel")
        print("   ‚úÖ H√≠brido: Funciona online/offline")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Teste falhou: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    main()
